# Default values for agentex.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: "agentex-backend"
  # This sets the pull policy for images.
  pullPolicy: Never
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: NodePort
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  # This sets the targetPort more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  containerPort: 5000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /readyz
    port: http
readinessProbe:
  httpGet:
    path: /readyz
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: build-context-pvc
    persistentVolumeClaim:
      claimName: build-context-pvc  # Name of the PVC defined in your templates
  - name: build-registry-secret
    secret:
      defaultMode: 420
      secretName: build-registry-creds
#  - name: project-directory
#    hostPath:
#      path: /mnt/host/agentex  # Change this to your actual current directory path
#      type: Directory

# Additional volumeMounts on the output Deployment definition.
# Mount the PVC to the desired path in the container
volumeMounts:
  - name: build-context-pvc
    mountPath: /mnt/build-contexts  # Path inside the container where the PVC is mounted
  - name: build-registry-secret
    mountPath: /root/.docker  # Path inside the container where the Docker registry credentials are mounted

nodeSelector: {}

tolerations: []

affinity: {}

#backend:
#  command:
#    - "uvicorn"
#    - "agentex.api.app:app"
#    - "--host"
#    - "0.0.0.0"
#    - "--port"
#    - "{{ .Values.service.containerPort }}"
#    - "--reload"

environment:
  ENV: "development"
  DATABASE_URL: "postgres://postgres:postgres@agentex-postgres:5432/agentex"
  TEMPORAL_URL: "temporal-frontend:7233"
  REDIS_URL: "redis://redis-master:6379"
  BUILD_CONTEXTS_PATH: "/mnt/build-contexts"
  BUILD_CONTEXT_PVC_NAME: "build-context-pvc"
  BUILD_REGISTRY_URL: "harbor.harbor.svc.cluster.local:80/agentex-test"

# PostgreSQL configuration
postgres:
  image:
    repository: postgres
    tag: "17"
    pullPolicy: IfNotPresent
  environment:
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: "postgres"
    POSTGRES_DB: "agentex"
  service:
    port: 5432
  persistence:
    enabled: true  # Set to false to disable persistence
    size: 1Gi      # Size of the volume
    storageClass: ""  # Optional storage class, e.g., "standard"

hooks:
  postgres:
    enabled: true
    weight: "0"
    hooks: "pre-install, pre-upgrade"
  migration:
    enabled: true
    weight: "1"
    hooks: "pre-install, pre-upgrade"
    deletePolicy: "hook-succeeded, hook-failed"

buildContexts:
  pvc:
    name: build-context-pvc
    storageClass: standard  # Or another storage class based on your Kubernetes setup
    accessModes:
      - ReadWriteMany  # Allows multiple pods to read/write to the volume
    resources:
      requests:
        storage: 10Gi  # Adjust based on your needs

buildRegistry:
  secretName: build-registry-creds
